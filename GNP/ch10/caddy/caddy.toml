

[apps.http.servers.test_server]
listen = [
    'localhost:2020',
]

# test_server 환경구성에는 routes 라는 배열이 존재하며, 배열 내의 각 라우트에는 하나 이상의 matcher가 존재한다.
[[apps.http.servers.test_server.routes]]

# mather는 9장에서 살펴본 http.ServeMux.Handle 메서드의 패턴 매칭과 같이 특정한 조건을 만족하는
# 클라이언트의 요청을 탐색하는 특별한 모듈이다. Caddy에는 클라이언트의 요청의 각 부분을 탐색할 수 있는 매처 모듈이 존재한다.
[[apps.http.servers.test_server.routes.match]]
path= [
    # 이 라우트에서는 요청하는 리소스가 절대 경로인 /backend 또는 /backend/로 시작하는 경우를 탐색하는 매처를 추가했다.
    # *은 /backend/ 접두사와 일치하는 모든 리소스를 찾을 때 와일드카드 문자로 사용된다.
    '/backend',
    'backend/*',
]

# 라우트는 하나이상의 핸들러를 포함할 수 있다. 예시에서는 Caddy에게 일치하는 모든 요청을 리버스 프락시 핸들러에게 전달하도록 하였다.
# reversproxy핸들러는 어디로 전송을 보낼지 정보를 입력받아야 한다. 
[[apps.http.servers.test_server.routes.handle]]
handler = 'reverse_proxy'

# 따라서 upstream 필드를 설정하고, dial 프로퍼티에 백엔드 서버의 소켓 주소 값을 설정한다.
[[apps.http.servers.test_server.routes.handle.upstreams]]
dial='localhost:8080'


# 핸들러 하나를 추가해봤다.
[[apps.http.servers.test_server.routes.match]]
path = ['/caddy']

[[apps.http.servers.test_server.routes.handle]]
handler = 'reverse_proxy'

[[apps.http.servers.test_server.routes.handle.upstreams]]
dial='localhost:8080'

# 정적 파일 서빙을 위한 두번째 라우트 추가
[[apps.http.servers.test_server.routes]]

# 앞선 라우트와 달리 matcher를 추가하지 않는다. 따라서 우의 라우트와 일치하지 않는 모든 요청은 이 라우터로 전달된다.
# 즉, 이 라우터가 기본 라우터가 된다. 따라서 환경구성 설정의 순서가 중요하다. 이 라우터가 위로 올라가면 모든 요청을 받게된다.
[[apps.http.servers.test_server.routes.handle]]
# 민감한 파일이 실수로 서빙되지 않도록 보호한다.
handler = 'restrict_prefix'
prefix='.'
[[apps.http.servers.test_server.routes.handle]]
handler='file_server'
root='../files'
index_names=[
    'index.html',
]