배열 슬라이싱을 통해서 슬라이스를 만드는 과정을 살펴보자.

var array [10]int
var slice []int = array[1:3]

slice 는 배열을 슬라이싱한다. array[1:3]에서 첫 번째 1은 슬라이스 시작위치를 나타낸다. 즉 array의 두번째 요소부터 슬라이싱한다.
뒤의 3은 슬라이슬 마치는 인덱스이다. 시작 위치부터 어디까지 슬라이싱을 할지 나타낸다.

array[1:3]을 보면 각 인덱스가 그대로 slice 필드값을 나타낸다. 슬라이스 구조체는 다음과 같은 필드를 가지고 있다.

type SliceHeader struct {
    Data unitptr
    Len int
    Cap int
}

첫번째 필드는 시작 위치 즉 Data 필드값을 나타낸다. array[1:3]을 했기 때문에 slice의 Data 필드는 &array[1] 즉 array의 두 번째 요소 메모리 주소를 가진다.
두번째 3은 슬라이싱하는 끝 인덱스로 Len 필드값은[끝인덱스- 처음 인덱스]로 계산된다. 따라서 2가 된다.
두 개 값으로 슬라이싱을 하면 세 번째 Cap 필드값은 실제 배열에서 최대 사용 가능한 개수가 된다. 그래서 1의 결과 slice의 Data는 array의 두 번째 요소 주소이고,
Len은 2, Cap은 9(배열의 길이는 10이지만 슬라이싱을 1번부터 했기 때문에 10-1이 된다.)가 된다.

var array [10] int
var slice []int = array[1:3:5]

 세 개 값을 사용해 슬라이싱하면 세 번째 값을 사용해 Cap 필드값을 구할 수 있다. Len과 마찬가지로 이 값에서 처음 인덱스 값을 뺀 값이 Cap값이 되어서 4가 된다.

 그래서 슬라이싱은 슬라이스 구조체의 각 필드값을 정해주는 것이라고 볼 수 있다.